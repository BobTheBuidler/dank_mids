name: PyTest

on:
  pull_request:
    branch: master
    paths:
      - '**.py'
      - '**.so'
      - '**/pytest.yaml'
      - 'poetry.lock'
      
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        pyversion: [ "3.10", "3.11", "3.12" ]
        provider: [ "TENDERLY_PROVIDER", "LLAMA_ETH_RPC", "INFURA_PROVIDER", "ALCHEMY_PROVIDER", "RETH_PROVIDER", "CHAINSTACK_PROVIDER" ]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache
        exclude:
        # gh runner throws "Error: Version ${{ matrix.pyversion }} with arch arm64 not found"
        - os: macos-latest
          pyversion: "3.8"
        - os: macos-latest
          pyversion: "3.9"

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Python (faster than using Python container)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyversion }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ runner.os }}-${{ matrix.pyversion }}-0  # increment to reset cache
          
      - name: Install Poetry (Python3.8)
        if: steps.cached-poetry.outputs.cache-hit != 'true' &&  matrix.pyversion == '3.8'
        uses: snok/install-poetry@v1
        with:
          version: "1.8.5" 
          
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true' && matrix.pyversion != '3.8'
        uses: snok/install-poetry@v1

      - name: Add Poetry to PATH on Windows
        if: runner.os == 'Windows'
        run: echo "##[add-path]C:\Users\runneradmin\.local\bin"
        
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.pyversion }}-${{ hashFiles('**/poetry.lock') }}-0  # increment to reset cache
          
      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      
      - name: Upgrade Setuptools
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run pip install -U "setuptools<81"
      
      - name: Setup brownie networks
        run: |
          poetry run brownie networks modify mainnet host=${{ secrets[matrix.provider] }}
        continue-on-error: true

      - name: Run test suite
        env:
          PYTEST_NETWORK: mainnet
          ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN  }}
          MAX_RETRIES: 2
        run: |
          poetry run pytest -s -v --asyncio-task-timeout=3600
      
